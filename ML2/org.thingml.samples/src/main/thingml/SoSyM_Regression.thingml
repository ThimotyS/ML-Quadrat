// Armin Moin, moin@in.tum.de
// A sample model instance illustrating regression using the REFIT dataset
// This example is related to the Non-Intrusive Appliance Load Monitoring (NIALM) use case.

import "thingml/core/timer.thingml"
import "thingml/core/_java/timer.thingml"

thing DB_Srv {
	message fridge_current_load(value: Double)
	;
	message freezer1_current_load(value: Double)
	;
	message freezer2_current_load(value: Double)
	;
	message washing_machine_current_load(value: Double)
	;
	message dishwasher_current_load(value: Double)
	;
	message computer_current_load(value: Double)
	;
	message television_site_current_load(value: Double)
	;
	message electric_heater_current_load(value: Double)
	;
	message aggregate_current_load(value: Double)
	;
	message request_current_loads()
	;
	message response_current_loads(fridge_load: Double, freezer1_load: Double, freezer2_load: Double, washing_machine_load: Double, dishwasher_load: Double, computer_load: Double, television_site_load: Double, electric_heater_load: Double, aggregate_load: Double)
	;
	message prediction(washer_dryer_load: Double)
	;
	provided port smart_meter_service {
		receives fridge_current_load, freezer1_current_load, freezer2_current_load, washing_machine_current_load, dishwasher_current_load, computer_current_load, television_site_current_load, electric_heater_current_load, aggregate_current_load
	}
	required port da_service {
		receives request_current_loads, prediction
		sends response_current_loads
	}
	property fridge_load: Double = 0.0
	property freezer1_load: Double = 0.0
	property freezer2_load: Double = 0.0
	property washing_machine_load: Double = 0.0
	property dishwasher_load: Double = 0.0
	property computer_load: Double = 0.0
	property television_site_load: Double = 0.0
	property electric_heater_load: Double = 0.0
	property aggregate_load: Double = 0.0
	property washer_dryer_load: Double = 0.0
	statechart DB_SrvBehavior init Active {
		on entry print "Database server started!\n"
		state Active {
			internal
			event fridge_event: smart_meter_service?fridge_current_load
			action fridge_load = fridge_event.value
			internal
			event freezer1_event: smart_meter_service?freezer1_current_load
			action freezer1_load = freezer1_event.value
			internal
			event freezer2_event: smart_meter_service?freezer2_current_load
			action freezer2_load = freezer2_event.value
			internal
			event washing_machine_event: smart_meter_service?washing_machine_current_load
			action washing_machine_load = washing_machine_event.value
			internal
			event dishwasher_event: smart_meter_service?dishwasher_current_load
			action dishwasher_load = dishwasher_event.value
			internal
			event computer_event: smart_meter_service?computer_current_load
			action computer_load = computer_event.value
			internal
			event television_site_event: smart_meter_service?television_site_current_load
			action television_site_load = television_site_event.value
			internal
			event electric_heater_event: smart_meter_service?electric_heater_current_load
			action electric_heater_load = electric_heater_event.value
			internal
			event aggregate_event: smart_meter_service?aggregate_current_load
			action aggregate_load = aggregate_event.value
			internal
			event daml_server_request_event: da_service?request_current_loads
			action da_service!response_current_loads(fridge_load, freezer1_load, freezer2_load, washing_machine_load, dishwasher_load, computer_load, television_site_load, electric_heater_load, aggregate_load)
			internal
			event daml_server_response_event: da_service?prediction
			action do
				washer_dryer_load = daml_server_response_event.washer_dryer_load
				print "Database server: got the prediction of the DAML server for the washer dryer load: \n"
				print "*************"
				print washer_dryer_load
				print "*************\n"
			end
		}
	}
}
thing DAML_Srv includes TimerMsgs {
	message request_current_loads()
	;
	message response_current_loads(fridge_load: Double, freezer1_load: Double, freezer2_load: Double, washing_machine_load: Double, dishwasher_load: Double, computer_load: Double, television_site_load: Double, electric_heater_load: Double, aggregate_load: Double)
	;
	message prediction(washer_dryer_load: Double)
	;
	
	required port timer {
		sends timer_start, timer_cancel
 		 receives timer_timeout
	}
	provided port da_service {
		sends request_current_loads, prediction
		receives response_current_loads
	}
	property fridge_load: Double = 0.0
	property freezer1_load: Double = 0.0
	property freezer2_load: Double = 0.0
	property washing_machine_load: Double = 0.0
	property dishwasher_load: Double = 0.0
	property computer_load: Double = 0.0
	property television_site_load: Double = 0.0
	property electric_heater_load: Double = 0.0
	property aggregate_load: Double = 0.0
	property washer_dryer_load: Double = 0.0
	data_analytics da1 
	@dalib "scikit-learn" {
	//@dalib "keras-tensorflow" {
	//{
		labels ON
		features fridge_load, freezer1_load, freezer2_load, washing_machine_load, dishwasher_load, computer_load, television_site_load, electric_heater_load, aggregate_load, washer_dryer_load
		prediction_results washer_dryer_load
		dataset "data/REFIT_house1_reordered_regression.csv"
		automl OFF
		sequential TRUE
		timestamps ON		
		preprocess_feature_scaler StandardScaler
		model_algorithm nn_multilayer_perceptron my_nn_mlp(activation relu, optimizer adam, loss SparseCategoricalCrossentropy)
		training_results "data/training.txt"
	}
	statechart DAML_SrvBehavior init Preprocess {
		on entry print "DAML server started!\n"
		state Preprocess {
			on entry do
				print "DAML server: Data Preprocessing\n"
				da_preprocess da1
			end
			transition -> Train
		}
		state Train {
			on entry do
				print "DAML server: Training\n"
				da_train da1
			end
			transition -> Ready
		}
		state Ready {
			on entry do
				print "DAML server: Ready for Prediction\n"
				print "DAML server: Waiting for 15 seconds...\n" // TODO
				timer!timer_start(15000) // TODO
			end
			transition -> SendDBRequest
			event timer?timer_timeout
		}
		state SendDBRequest {
			on entry do
				print "DAML server: Sending query to the DB server...\n"
				da_service!request_current_loads()
			end
			transition -> Predict
			event m: da_service?response_current_loads
			action do
				print "DAML server: got the loads from the DB server.\n"
				fridge_load = m.fridge_load
				freezer1_load = m.freezer1_load
				freezer2_load = m.freezer2_load
				washing_machine_load = m.washing_machine_load
				dishwasher_load = m.dishwasher_load
				computer_load = m.computer_load
				television_site_load = m.television_site_load
				electric_heater_load = m.electric_heater_load
				aggregate_load = m.aggregate_load
			end
		}
		state Predict {
			on entry do
				print "DAML server: Predicting\n"
				da_predict da1(fridge_load, freezer1_load, freezer2_load, washing_machine_load, dishwasher_load, computer_load, television_site_load, electric_heater_load, aggregate_load)
				da_service!prediction(washer_dryer_load)
			end
			transition -> Ready
		// on exit da_save da1
		}
	}
}
thing Fridge includes TimerMsgs {
	message fridge_current_load(value: Double)
	;
	
	required port timer {
		sends timer_start, timer_cancel
 		 receives timer_timeout
	}
	required port smart_meter_service {
		sends fridge_current_load
	}
	property load: Double = 84 // A random value for simulation and testing
	statechart FridgeBehavior init Sleep {
		on entry print "Fridge meter started!\n"
		state Sleep {
			on entry do
				print "Fridge meter: sleeping for 8 seconds...\n"
				timer!timer_start(8000)
			end
			transition -> Wakeup
			event timer?timer_timeout
			on exit timer!timer_cancel()
		}
		state Wakeup {
			on entry do
				print "Fridge meter: Measuring...\n"
				smart_meter_service!fridge_current_load(load)
			end
			transition -> Sleep
		}
	}
}
thing Freezer1 includes TimerMsgs {
	message freezer1_current_load(value: Double)
	;
	
	required port timer {
		sends timer_start, timer_cancel
 		 receives timer_timeout
	}
	required port smart_meter_service {
		sends freezer1_current_load
	}
	property load: Double = 0 // A random value for simulation and testing
	statechart Freezer1Behavior init Sleep {
		on entry print "Freezer1 meter started!\n"
		state Sleep {
			on entry do
				print "Freezer1 meter: sleeping for 8 seconds...\n"
				timer!timer_start(8000)
			end
			transition -> Wakeup
			event timer?timer_timeout
			on exit timer!timer_cancel()
		}
		state Wakeup {
			on entry do
				print "Freezer1 meter: Measuring...\n"
				smart_meter_service!freezer1_current_load(load)
			end
			transition -> Sleep
		}
	}
}
thing Freezer2 includes TimerMsgs {
	message freezer2_current_load(value: Double)
	;
	
	required port timer {
		sends timer_start, timer_cancel
 		 receives timer_timeout
	}
	required port smart_meter_service {
		sends freezer2_current_load
	}
	property load: Double = 0 // A random value for simulation and testing
	statechart Freezer2Behavior init Sleep {
		on entry print "Freezer2 meter started!\n"
		state Sleep {
			on entry do
				print "Freezer2 meter: sleeping for 8 seconds...\n"
				timer!timer_start(8000)
			end
			transition -> Wakeup
			event timer?timer_timeout
			on exit timer!timer_cancel()
		}
		state Wakeup {
			on entry do
				print "Freezer2 meter: Measuring...\n"
				smart_meter_service!freezer2_current_load(load)
			end
			transition -> Sleep
		}
	}
}
thing Washing_machine includes TimerMsgs {
	message washing_machine_current_load(value: Double)
	;
	
	required port timer {
		sends timer_start, timer_cancel
 		 receives timer_timeout
	}
	required port smart_meter_service {
		sends washing_machine_current_load
	}
	property load: Double = 84 // A random value for simulation and testing
	statechart Washing_machineBehavior init Sleep {
		on entry print "Washing_machine meter started!\n"
		state Sleep {
			on entry do
				print "Washing_machine meter: sleeping for 8 seconds...\n"
				timer!timer_start(8000)
			end
			transition -> Wakeup
			event timer?timer_timeout
			on exit timer!timer_cancel()
		}
		state Wakeup {
			on entry do
				print "Washing_machine meter: Measuring...\n"
				smart_meter_service!washing_machine_current_load(load)
			end
			transition -> Sleep
		}
	}
}
thing Dishwasher includes TimerMsgs {
	message dishwasher_current_load(value: Double)
	;
	
	required port timer {
		sends timer_start, timer_cancel
 		 receives timer_timeout
	}
	required port smart_meter_service {
		sends dishwasher_current_load
	}
	property load: Double = 84 // A random value for simulation and testing
	statechart DishwasherBehavior init Sleep {
		on entry print "Dishwasher meter started!\n"
		state Sleep {
			on entry do
				print "Dishwasher meter: sleeping for 8 seconds...\n"
				timer!timer_start(8000)
			end
			transition -> Wakeup
			event timer?timer_timeout
			on exit timer!timer_cancel()
		}
		state Wakeup {
			on entry do
				print "Dishwasher meter: Measuring...\n"
				smart_meter_service!dishwasher_current_load(load)
			end
			transition -> Sleep
		}
	}
}
thing Computer includes TimerMsgs {
	message computer_current_load(value: Double)
	;
	
	required port timer {
		sends timer_start, timer_cancel
 		 receives timer_timeout
	}
	required port smart_meter_service {
		sends computer_current_load
	}
	property load: Double = 42 // A random value for simulation and testing
	statechart ComputerBehavior init Sleep {
		on entry print "Computer meter started!\n"
		state Sleep {
			on entry do
				print "Computer meter: sleeping for 8 seconds...\n"
				timer!timer_start(8000)
			end
			transition -> Wakeup
			event timer?timer_timeout
			on exit timer!timer_cancel()
		}
		state Wakeup {
			on entry do
				print "Computer meter: Measuring...\n"
				smart_meter_service!computer_current_load(load)
			end
			transition -> Sleep
		}
	}
}
thing TV_Site includes TimerMsgs {
	message tv_site_current_load(value: Double)
	;
	
	required port timer {
		sends timer_start, timer_cancel
 		 receives timer_timeout
	}
	required port smart_meter_service {
		sends tv_site_current_load
	}
	property load: Double = 0 // A random value for simulation and testing
	statechart TV_SiteBehavior init Sleep {
		on entry print "TV Site meter started!\n"
		state Sleep {
			on entry do
				print "TV Site meter: sleeping for 8 seconds...\n"
				timer!timer_start(8000)
			end
			transition -> Wakeup
			event timer?timer_timeout
			on exit timer!timer_cancel()
		}
		state Wakeup {
			on entry do
				print "TV Site meter: Measuring...\n"
				smart_meter_service!tv_site_current_load(load)
			end
			transition -> Sleep
		}
	}
}
thing ElectricHeater includes TimerMsgs {
	message electric_heater_current_load(value: Double)
	;
	
	required port timer {
		sends timer_start, timer_cancel
 		 receives timer_timeout
	}
	required port smart_meter_service {
		sends electric_heater_current_load
	}
	property load: Double = 1 // A random value for simulation and testing
	statechart ElectricHeaterBehavior init Sleep {
		on entry print "Electric Heater meter started!\n"
		state Sleep {
			on entry do
				print "Electric Heater meter: sleeping for 8 seconds...\n"
				timer!timer_start(8000)
			end
			transition -> Wakeup
			event timer?timer_timeout
			on exit timer!timer_cancel()
		}
		state Wakeup {
			on entry do
				print "Electric Heater meter: Measuring...\n"
				smart_meter_service!electric_heater_current_load(load)
			end
			transition -> Sleep
		}
	}
}
thing Aggregate includes TimerMsgs {
	message aggregate_current_load(value: Double)
	;
	
	required port timer {
		sends timer_start, timer_cancel
 		 receives timer_timeout
	}
	required port smart_meter_service {
		sends aggregate_current_load
	}
	property load: Double = 250 // A random value for simulation and testing
	statechart AggregateBehavior init Sleep {
		on entry print "Aggregate meter started!\n"
		state Sleep {
			on entry do
				print "Aggregate meter: sleeping for 8 seconds...\n"
				timer!timer_start(8000)
			end
			transition -> Wakeup
			event timer?timer_timeout
			on exit timer!timer_cancel()
		}
		state Wakeup {
			on entry do
				print "Aggregate meter: Measuring...\n"
				smart_meter_service!aggregate_current_load(load)
			end
			transition -> Sleep
		}
	}
}
thing WasherDryer includes TimerMsgs {
	message washer_dryer_current_load(value: Double)
	;
	
	required port timer {
		sends timer_start, timer_cancel
 		 receives timer_timeout
	}
	required port smart_meter_service {
		sends washer_dryer_current_load
	}
	property load: Double = 0 // A random value for simulation and testing
	statechart WasherDryerBehavior init Sleep {
		on entry print "Washer Dryer meter started!\n"
		state Sleep {
			on entry do
				print "Washer Dryer meter: sleeping for 8 seconds...\n"
				timer!timer_start(8000)
			end
			transition -> Wakeup
			event timer?timer_timeout
			on exit timer!timer_cancel()
		}
		state Wakeup {
			on entry do
				print "Washer Dryer meter: Measuring...\n"
			// smart_meter_service!washer_dryer_current_load(load) //Deliberately fails to send in the simulation and testing scenario...
			end
			transition -> Sleep
		}
	}
}
configuration SoSyM_Regression_Cfg @compiler "python_java" {
	instance timer : TimerJava
	instance last_training_timer : TimerJava
	instance dB_Srv : DB_Srv
	instance dAML_Srv : DAML_Srv
	instance fridge : Fridge
	instance freezer1 : Freezer1
	instance freezer2 : Freezer2
	instance washing_machine : Washing_machine
	instance dishwasher : Dishwasher
	instance computer : Computer
	instance tV_Site : TV_Site
	instance electricHeater : ElectricHeater
	instance aggregate : Aggregate
	instance washerDryer : WasherDryer
	connector dB_Srv.da_service => dAML_Srv.da_service
	connector dAML_Srv.timer => timer.timer
	connector fridge.smart_meter_service => dB_Srv.smart_meter_service
	connector fridge.timer => timer.timer
	connector freezer1.smart_meter_service => dB_Srv.smart_meter_service
	connector freezer1.timer => timer.timer
	connector freezer2.smart_meter_service => dB_Srv.smart_meter_service
	connector freezer2.timer => timer.timer
	connector washing_machine.smart_meter_service => dB_Srv.smart_meter_service
	connector washing_machine.timer => timer.timer
	connector dishwasher.smart_meter_service => dB_Srv.smart_meter_service
	connector dishwasher.timer => timer.timer
	connector computer.smart_meter_service => dB_Srv.smart_meter_service
	connector computer.timer => timer.timer
	connector tV_Site.smart_meter_service => dB_Srv.smart_meter_service
	connector tV_Site.timer => timer.timer
	connector electricHeater.smart_meter_service => dB_Srv.smart_meter_service
	connector electricHeater.timer => timer.timer
	connector aggregate.smart_meter_service => dB_Srv.smart_meter_service
	connector aggregate.timer => timer.timer
	connector washerDryer.smart_meter_service => dB_Srv.smart_meter_service
	connector washerDryer.timer => timer.timer
}