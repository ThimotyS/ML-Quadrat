/**
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 */
/**
 * generated by Xtext 2.10.0
 */
package org.thingml.xtext.ui.labeling;

import com.google.inject.Inject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;
import org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.ListExtensions;
import org.thingml.xtext.thingML.Action;
import org.thingml.xtext.thingML.CompositeState;
import org.thingml.xtext.thingML.Configuration;
import org.thingml.xtext.thingML.Connector;
import org.thingml.xtext.thingML.Event;
import org.thingml.xtext.thingML.Expression;
import org.thingml.xtext.thingML.FinalState;
import org.thingml.xtext.thingML.Function;
import org.thingml.xtext.thingML.Handler;
import org.thingml.xtext.thingML.Instance;
import org.thingml.xtext.thingML.IntegerLiteral;
import org.thingml.xtext.thingML.InternalTransition;
import org.thingml.xtext.thingML.Message;
import org.thingml.xtext.thingML.Parameter;
import org.thingml.xtext.thingML.PlatformAnnotation;
import org.thingml.xtext.thingML.Port;
import org.thingml.xtext.thingML.Property;
import org.thingml.xtext.thingML.Protocol;
import org.thingml.xtext.thingML.ReceiveMessage;
import org.thingml.xtext.thingML.Region;
import org.thingml.xtext.thingML.Session;
import org.thingml.xtext.thingML.State;
import org.thingml.xtext.thingML.StateContainer;
import org.thingml.xtext.thingML.Thing;
import org.thingml.xtext.thingML.Transition;
import org.thingml.xtext.thingML.Type;
import org.thingml.xtext.thingML.TypeRef;

/**
 * Provides labels for EObjects.
 * 
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#label-provider
 */
@SuppressWarnings("all")
public class ThingMLLabelProvider extends DefaultEObjectLabelProvider {
  @Inject
  public ThingMLLabelProvider(final AdapterFactoryLabelProvider delegate) {
    super(delegate);
  }
  
  public String image(final Action a) {
    return "outline/open iconic/code-2x.png";
  }
  
  public String image(final Expression e) {
    return "outline/open iconic/code-2x.png";
  }
  
  public String image(final Configuration cfg) {
    return "outline/open iconic/spreadsheet-2x.png";
  }
  
  public String image(final Instance i) {
    return "outline/open iconic/media-play-2x.png";
  }
  
  public String image(final Connector c) {
    return "outline/open iconic/resize-width-2x.png";
  }
  
  public String text(final Thing thing) {
    String _name = thing.getName();
    String _xifexpression = null;
    boolean _isEmpty = thing.getIncludes().isEmpty();
    if (_isEmpty) {
      _xifexpression = "";
    } else {
      final Function1<Thing, String> _function = (Thing include) -> {
        return include.getName();
      };
      String _join = IterableExtensions.join(ListExtensions.<Thing, String>map(thing.getIncludes(), _function), ", ");
      _xifexpression = (" : " + _join);
    }
    return (_name + _xifexpression);
  }
  
  public String image(final Thing thing) {
    return "heads.png";
  }
  
  public String image(final PlatformAnnotation annotation) {
    return "outline/open iconic/paperclip-2x.png";
  }
  
  public String text(final PlatformAnnotation annotation) {
    String _xifexpression = null;
    int _length = annotation.getValue().length();
    boolean _lessThan = (_length < 16);
    if (_lessThan) {
      String _name = annotation.getName();
      String _plus = (_name + ": ");
      String _value = annotation.getValue();
      _xifexpression = (_plus + _value);
    } else {
      String _name_1 = annotation.getName();
      String _plus_1 = (_name_1 + ": ");
      String _substring = annotation.getValue().substring(0, 16);
      String _plus_2 = (_plus_1 + _substring);
      _xifexpression = (_plus_2 + "...");
    }
    return _xifexpression;
  }
  
  public String image(final Type datatype) {
    return "outline/open iconic/document-2x.png";
  }
  
  public String image(final Protocol p) {
    return "outline/open iconic/audio-2x.png";
  }
  
  public String text(final Message message) {
    String _name = message.getName();
    EList<Parameter> _parameters = message.getParameters();
    String _parametersString = this.parametersString(((EList<Parameter>) _parameters));
    return (_name + _parametersString);
  }
  
  public String image(final Message message) {
    return "outline/open iconic/envelope-closed-2x.png";
  }
  
  public String text(final Function function) {
    String _name = function.getName();
    EList<Parameter> _parameters = function.getParameters();
    String _parametersString = this.parametersString(((EList<Parameter>) _parameters));
    String _plus = (_name + _parametersString);
    String _isTypeString = this.isTypeString(function.getTypeRef());
    return (_plus + _isTypeString);
  }
  
  public String image(final Function function) {
    return "outline/open iconic/cog-2x.png";
  }
  
  public String text(final Property property) {
    String _name = property.getName();
    String _isTypeString = this.isTypeString(property.getTypeRef());
    return (_name + _isTypeString);
  }
  
  public String image(final Property property) {
    return "outline/open iconic/tag-2x.png";
  }
  
  public String image(final Port port) {
    return "outline/open iconic/transfer-2x.png";
  }
  
  public String text(final StateContainer container) {
    String _name = container.getName();
    String _plus = (_name + " -> ");
    String _name_1 = container.getInitial().getName();
    String _plus_1 = (_plus + _name_1);
    String _xifexpression = null;
    boolean _isHistory = container.isHistory();
    if (_isHistory) {
      _xifexpression = " (keeps history)";
    } else {
      _xifexpression = "";
    }
    return (_plus_1 + _xifexpression);
  }
  
  public String image(final CompositeState c) {
    return "outline/open iconic/aperture-2x.png";
  }
  
  public String image(final Session session) {
    return "outline/open iconic/fork-2x.png";
  }
  
  public String image(final Region r) {
    return "outline/open iconic/pause-2x.png";
  }
  
  public String image(final State state) {
    String _xifexpression = null;
    EObject _eContainer = state.eContainer();
    if ((_eContainer instanceof StateContainer)) {
      String _xblockexpression = null;
      {
        EObject _eContainer_1 = state.eContainer();
        StateContainer c = ((StateContainer) _eContainer_1);
        String _xifexpression_1 = null;
        boolean _equals = c.getInitial().equals(state);
        if (_equals) {
          _xifexpression_1 = "outline/open iconic/power-standby-2x.png";
        } else {
          _xifexpression_1 = "outline/open iconic/target-2x.png";
        }
        _xblockexpression = _xifexpression_1;
      }
      _xifexpression = _xblockexpression;
    } else {
      _xifexpression = "outline/open iconic/target-2x.png";
    }
    return _xifexpression;
  }
  
  public String image(final FinalState state) {
    return "outline/open iconic/account-logout-2x.png";
  }
  
  public String image(final Transition t) {
    return "outline/open iconic/share-2x.png";
  }
  
  public String text(final Handler t) {
    String _xifexpression = null;
    if (((t.getEvent() != null) && (t.getEvent() instanceof ReceiveMessage))) {
      Event _event = t.getEvent();
      String _name = ((ReceiveMessage) _event).getPort().getName();
      String _plus = ("on " + _name);
      String _plus_1 = (_plus + "?");
      Event _event_1 = t.getEvent();
      String _name_1 = ((ReceiveMessage) _event_1).getMessage().getName();
      _xifexpression = (_plus_1 + _name_1);
    } else {
      _xifexpression = "";
    }
    return _xifexpression;
  }
  
  public String text(final Transition t) {
    String _name = t.getTarget().getName();
    String _plus = (_name + " ");
    String _text = this.text(((Handler) t));
    return (_plus + _text);
  }
  
  public String image(final InternalTransition t) {
    return "outline/open iconic/reload-2x.png";
  }
  
  /**
   * --- Helpers ---
   */
  public String parametersString(final EList<Parameter> parameters) {
    final Function1<Parameter, String> _function = (Parameter it) -> {
      return this.typeString(it.getTypeRef());
    };
    String _join = IterableExtensions.join(ListExtensions.<Parameter, String>map(parameters, _function), ", ");
    String _plus = ("(" + _join);
    return (_plus + ")");
  }
  
  public String isTypeString(final TypeRef ref) {
    String _xifexpression = null;
    if ((ref == null)) {
      _xifexpression = "";
    } else {
      String _typeString = this.typeString(ref);
      _xifexpression = (" : " + _typeString);
    }
    return _xifexpression;
  }
  
  public String typeString(final TypeRef ref) {
    String _xifexpression = null;
    if ((ref == null)) {
      _xifexpression = "";
    } else {
      String _name = ref.getType().getName();
      String _xifexpression_1 = null;
      boolean _isIsArray = ref.isIsArray();
      if (_isIsArray) {
        Object _xifexpression_2 = null;
        Expression _cardinality = ref.getCardinality();
        if ((_cardinality instanceof IntegerLiteral)) {
          Expression _cardinality_1 = ref.getCardinality();
          _xifexpression_2 = Long.valueOf(((IntegerLiteral) _cardinality_1).getIntValue());
        } else {
          _xifexpression_2 = "";
        }
        String _plus = ("[" + _xifexpression_2);
        _xifexpression_1 = (_plus + "]");
      } else {
        _xifexpression_1 = "";
      }
      _xifexpression = (_name + _xifexpression_1);
    }
    return _xifexpression;
  }
}
