import "thingml/core/timer.thingml"

//datatype Double<4>
//    @type_checker "Real"
//	@c_type "double"
//	@c_byte_size "4"
//	@java_type "double"
//  	@js_type "float"
//	@java_primitive "true";
//
//datatype UInt64<8>
//    @type_checker "Integer"
//	@c_type "uint64_t"
//	@c_byte_size "8"
//	@java_type "long"
//    @js_type "long"
//	@java_primitive "true";

object String
    @type_checker "String"
	@c_type "char *"
	@c_byte_size "*"
	@java_type "String"
    @js_type "String"
    @SenML_type "String";
	
thing fragment ESMMsgs {
	
	message request_current_prices();
	message response_current_prices(current_prices: Double[10]);
	
	message request_future_prices(received_current_prices: Double[10]);
	message response_future_prices(future_prices: Double[10]);
}

thing SmartGridNode includes ESMMsgs, TimerMsgs {
	
	required port stock_price_info_service {
		sends request_current_prices
		receives response_current_prices
	}
	
	required port da_service {
		sends request_future_prices
		receives response_future_prices
	}
	
	 required port timer {
 		 sends timer_start, timer_cancel
 		 receives timer_timeout
 	}
		
	property received_current_prices: Double[10]
		set received_current_prices[0] = 0.0
        set received_current_prices[1] = 0.0
        set received_current_prices[2] = 0.0
        set received_current_prices[3] = 0.0
		set received_current_prices[4] = 0.0
        set received_current_prices[5] = 0.0
        set received_current_prices[6] = 0.0
        set received_current_prices[7] = 0.0
        set received_current_prices[8] = 0.0
        set received_current_prices[9] = 0.0
	
	property received_future_prices: Double[10]
		set received_future_prices[0] = 0.0
        set received_future_prices[1] = 0.0
        set received_future_prices[2] = 0.0
        set received_future_prices[3] = 0.0
		set received_future_prices[4] = 0.0
        set received_future_prices[5] = 0.0
        set received_future_prices[6] = 0.0
        set received_future_prices[7] = 0.0
        set received_future_prices[8] = 0.0
        set received_future_prices[9] = 0.0
	
	
	statechart SmartGridNodeBehavior init Init {
	
	on entry print "Smart Grid Node Started!\n"
	
		state Init {
			
			on entry do
				print "Waiting...\n"
				timer!timer_start(10000)					
			end			
			transition -> RequestPrices 
			event timer?timer_timeout
			
			on exit timer!timer_cancel()
			
		}
		
		state RequestPrices {
			
			on entry do
				print "Requesting the current prices at the energy stock market...\n"				
				stock_price_info_service!request_current_prices()
			end
			
			transition -> RequestFuturePrices
			event e1: stock_price_info_service?response_current_prices
			action received_current_prices = e1.current_prices
			
		}
		
		state RequestFuturePrices {
			on entry do
				print "Requesting future price prediction...\n"				
				da_service!request_future_prices(received_current_prices)
			end
			
			transition -> AnnounceFuturePrices
			event e2: da_service?response_future_prices
			action received_future_prices = e2.future_prices
		}
		
		state AnnounceFuturePrices {
			on entry do
				print "The predicted future prices are:...\n"
				for (item: Double in received_future_prices)
					do
					print item
					print "\n"
					end
			end
			
			transition -> Init
			}
	}

}

thing EnergyStockMarket includes ESMMsgs {
	
	provided port stock_price_info_service {
		receives request_current_prices
		sends response_current_prices
	}
	
	property my_current_prices: Double[10] //TODO
		set my_current_prices[0] = 121.2
        set my_current_prices[1] = 1010.9
        set my_current_prices[2] = 25.4
        set my_current_prices[3] = 11.19
		set my_current_prices[4] = 792
        set my_current_prices[5] = 401.52
        set my_current_prices[6] = 112.6
        set my_current_prices[7] = 10002
        set my_current_prices[8] = 11.7
        set my_current_prices[9] = 9.9
	
	statechart EnergyStockMarketBehavior init Active {

        on entry print "Energy Stock Market Started!\n"
	
		state Active {
			
			internal event e: stock_price_info_service?request_current_prices			
			action		 
			do				
			print("Got a request from a smart grid node to share the current prices at the energy stock market...\n")
			print("Sending the current prices:\n")
			for (item: Double in my_current_prices)
					do
					print item
					print "\n"
					end
			stock_price_info_service!response_current_prices(my_current_prices)
			end
		}
	}
}

thing ESMDataAnalytics includes ESMMsgs, TimerMsgs {
		
	provided port da_service {		
		sends response_future_prices
		receives request_future_prices
	}
	
	required port last_training_timer {
 		 sends timer_start, timer_cancel
 		 receives timer_timeout
 	}
	
	property current_prices: Double[10]
	    set current_prices[0] = 0.0
        set current_prices[1] = 0.0
        set current_prices[2] = 0.0
        set current_prices[3] = 0.0
		set current_prices[4] = 0.0
        set current_prices[5] = 0.0
        set current_prices[6] = 0.0
        set current_prices[7] = 0.0
        set current_prices[8] = 0.0
        set current_prices[9] = 0.0
	
	property future_prices: Double[10]
		set future_prices[0] = 0.0
        set future_prices[1] = 0.0
        set future_prices[2] = 0.0
        set future_prices[3] = 0.0
		set future_prices[4] = 0.0
        set future_prices[5] = 0.0
        set future_prices[6] = 0.0
        set future_prices[7] = 0.0
        set future_prices[8] = 0.0
        set future_prices[9] = 0.0

	data_analytics da1 {
		dataset "data/esm.csv"
		sequential TRUE
		timestamps ON
		labels ON
		features current_prices, future_prices
		////model_algorithm gated_recurrent_units my_gru(
			////loss_function MSE, optimizer Adam, learning_rate 0.00001
		////)
		model_algorithm decision_tree my_dt()
		training_results "data/training_da1.txt"		
		prediction_results future_prices
	}

	statechart ESMDataAnalyticsBehavior init Preprocess {
	
	on entry print "ESM Data Analytics Started!\n"
	
		state Preprocess {
			on entry do
				print "ESM Data Analytics: Data Preprocessing\n"
				da_preprocess da1
			end
			transition -> Train			
		}
		
		state Train {
			on entry do
				print "ESM Data Analytics: Training\n"
				da_train da1
			end
			transition -> Ready
		}
		
		state Ready {
			on entry do
			print "ESM Data Analytics: Ready for Prediction\n"
			last_training_timer!timer_start(3600000)
			end
			
			transition -> Train 
			event last_training_timer?timer_timeout
			
			transition -> Predict
			event m: da_service?request_future_prices
			action current_prices = m.received_current_prices
			
			on exit last_training_timer!timer_cancel()
			
		}
		
		state Predict {
			on entry do
				print "ESM Data Analytics: Predicting\n"
				da_predict da1(current_prices)
				da_service!response_future_prices(future_prices)
			end
			transition -> Ready
			on exit da_save da1
		}	
	}
}